#!/usr/bin/env python3
#
# Copyright (C) 2017 Marcel Patzwahl
# Licensed under the terms of the GNU GPL v3 only.
#
# Script to see the available updates of pacman and the AUR
# Modified by Sam Meyer-Reed to work with Waybar

import subprocess
from subprocess import check_output, run
import argparse
import os
import re
import json


def create_argparse():
    def _default(name, default='', arg_type=str):
        val = default
        if name in os.environ:
            val = os.environ[name]
        return arg_type(val)

    strbool = lambda s: s.lower() in ['t', 'true', '1']
    strlist = lambda s: s.split()

    parser = argparse.ArgumentParser(description='Check for pacman updates')
    parser.add_argument(
        '-b',
        '--base_color',
        default = _default('BASE_COLOR', 'green'),
        help='base color of the output(default=green)'
    )
    parser.add_argument(
        '-u',
        '--updates_available_color',
        default = _default('UPDATE_COLOR', 'yellow'),
        help='color of the output, when updates are available(default=yellow)'
    )
    parser.add_argument(
        '-y',
        '--aur_yay',
        action = 'store_const',
        const = True,
        default = _default('AUR_YAY', 'False', strbool),
        help='Include AUR packages. Attn: Yay must be installed'
    )
    parser.add_argument(
        '-q',
        '--quiet',
        action = 'store_const',
        const = True,
        default = _default('QUIET', 'False', strbool),
        help = 'Do not produce output when system is up to date'
    )
    parser.add_argument(
        '-w',
        '--watch',
        nargs='*',
        default = _default('WATCH', arg_type=strlist),
        help='Explicitly watch for specified packages. '
        'Listed elements are treated as regular expressions for matching.'
    )
    return parser.parse_args()


def get_updates():
    output = ''
    try:
        output = check_output(['checkupdates']).decode('utf-8')
    except subprocess.CalledProcessError as exc:
        # checkupdates exits with 2 and no output if no updates are available.
        # we ignore this case and go on
        if not (exc.returncode == 2 and not exc.output):
            raise exc
    if not output:
        return []

    updates = [line.split(' ')[0]
               for line in output.split('\n')
               if line]

    return updates


def get_aur_yay_updates():
    output = ''
    try:
        # output = check_output(['yay', '-Qua']).decode('utf-8')
        output = run(['yay', '-Qua'], check=True, capture_output=True, text=True).stdout
    except subprocess.CalledProcessError as exc:
        # yay exits with 1 and no output if no updates are available.
        # we ignore this case and go on
        if not (exc.returncode == 1 and not exc.output):
            raise exc
    if not output:
        return []

    aur_updates = [line.split(' ')[0] for line in output.split('\n') if line]

    return aur_updates


def matching_updates(updates, watch_list):
    matches = set()
    for u in updates:
        for w in watch_list:
            if re.match(w, u):
                matches.add(u)

    return matches

# Main function
def main():
    label = os.environ.get("LABEL","")
    args = create_argparse()
    updates = get_updates()
    if args.aur_yay:
        updates += get_aur_yay_updates()

    update_count = len(updates)
    
    # Prepare output for Waybar
    waybar_output = {}
    
    if update_count > 0:
        if update_count == 1:
            info = str(update_count) + ' update available'
            short_info = str(update_count) + ' update'
        else:
            info = str(update_count) + ' updates available'
            short_info = str(update_count) + ' updates'

        matches = matching_updates(updates, args.watch)
        if matches:
            info += ' [{0}]'.format(', '.join(matches))
            short_info += '*'
        
        # Set values for Waybar
        waybar_output["text"] = short_info
        waybar_output["tooltip"] = info
        waybar_output["class"] = "updates"
        waybar_output["alt"] = short_info
        
        # Print in JSON format for Waybar
        print(json.dumps(waybar_output))
    elif not args.quiet:
        waybar_output["text"] = "Up to date"
        waybar_output["tooltip"] = "System is up to date"
        waybar_output["class"] = "no-updates"
        waybar_output["alt"] = "system up to date"
        
        # Print in JSON format for Waybar
        print(json.dumps(waybar_output))

if __name__ == "__main__":
    main()
